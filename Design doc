Design Document
Project Name: Web-Based Secure and Distributed Voting System
 Courses: Information Security (IS) and Parallel and Distributed Computing (PDC)
 Team: Areesha Tariq, Muhammad Zikrullah Rehman, Shahliza Ahmed

1. Overview
The proposed system is a web-based voting application that addresses key security challenges and the pitfalls of centralized voting systems. It leverages robust Identity and Access Management (IAM) principles alongside distributed computing techniques to achieve:
Secure Authentication and Authorization:
 Utilizing JWT-based authentication with a secondary two-factor authentication (2FA) step.


Distributed Vote Processing:
 Simulating multiple nodes with a consensus protocol that ensures fault tolerance, data consistency, and scalability.


Non-functional Enhancements:
 Optional integration of Apache Solr for audit log indexing and search, and enhancements like clock synchronization and distributed mutual exclusion (mutex) to manage concurrent updates.



2. System Architecture
2.1 Architectural Overview
The system is divided into three primary layers:
Frontend Layer:
 Built using React, this layer provides a user-friendly interface for:


User registration and login (with 2FA for additional security)


Viewing available ballots and casting votes


Real-time updates using WebSockets


Backend Layer:
 Developed using FastAPI (or Django if preferred), the backend handles:


Secure API endpoints for user authentication and vote submission


Implementation of IAM features (JWT authentication, role-based access control)


Encryption/decryption of vote data using AES and RSA


Distributed Processing Layer:
 Simulated distributed nodes (using Docker containers or separate processes) manage vote processing by:


Running a simplified consensus algorithm (such as a basic version of PBFT or Proof of Authority)


Synchronizing node clocks to ensure consistent timestamping and ordering of votes


Employing a distributed mutex mechanism to prevent race conditions during vote tally updates


Optional Module:
Solr Integration:
 A lightweight Apache Solr instance is optionally integrated to index audit logs (voting events and authentication logs) and provide a rapid search interface for system administrators.



3. Detailed Component Breakdown
3.1 Frontend (React-Based Web Application)
User Interface & Experience:


Login & Registration:
 Standard forms for username–password entry. Post-login, the user is prompted for a second factor (2FA) using methods like TOTP, SMS, or email-based OTP.
 References: OAuth, JWT.


Voting Dashboard:
 Displays a list of voting items (ballot) and current vote counts. Real-time updates are pushed via WebSockets.


Notifications:
 Users receive confirmations for successful authentication, 2FA completion, and vote submissions.


3.2 Backend (API Server Using FastAPI/Django)
Identity and Access Management (IAM):


Authentication:
 Users are authenticated with a username and password. Upon successful authentication, a JWT is issued.


Two-Factor Authentication (2FA):
 After the primary authentication, an OTP is generated and sent to the user via their chosen method. The system validates this OTP before finalizing the session.


Authorization:
 Implements role-based access control with roles including Voter, Admin, and Observer.


Encryption:
 Votes are encrypted using AES for data security and RSA for key exchange.
 References: RSA/AES Overview.


Vote Handling APIs:


Endpoints that accept encrypted vote submissions.


Secure transmission over HTTPS.


Processing and temporary storage before distributing the vote to processing nodes.


3.3 Distributed Vote Processing (Simulated Nodes)
Node Setup:


Simulated Environment:
 Run 3–5 nodes as separate Docker containers or processes.


Consensus Protocol:
 A lightweight protocol (adapted PBFT or Proof-of-Authority) enables nodes to agree on vote validity and tally updates. References: Byzantine Fault Tolerance.


Clock Synchronization:


Each node periodically synchronizes with a master time source or designated time server.


Ensures vote ordering and timestamp accuracy across the distributed system. References: NTP.


Distributed Mutual Exclusion (Mutex):


To prevent conflicting updates, a distributed mutex mechanism (e.g., token passing or a centralized lock manager for the prototype) ensures that only one node modifies the vote tally at any given time. References: Distributed Mutual Exclusion.


3.4 Optional Audit Logging with Solr
Audit Logs:
 Every vote submission and authentication event is logged.


Solr Integration:
 The logs are indexed into a Solr instance, enabling fast searches and analysis of historical data for auditing purposes. This module is non-functional but demonstrates an enterprise-level approach to log management.
 References: Apache Solr.



4. Application Flow
4.1 User Authentication and 2FA
User Visits the Application:


They access the React-based web interface.


Registration/Login Process:


The user registers or logs in with their username and password.


Initiation of 2FA:


Upon successful password verification, the backend triggers the 2FA process.


The user receives an OTP via TOTP, SMS, or email.


OTP Verification and JWT Issuance:


The OTP is validated. On success, a JWT is issued and stored on the client for subsequent requests.


4.2 Vote Casting and Encryption
Vote Display:


Authenticated users view the ballot and choose their candidate/proposal.


Vote Encryption and Submission:


Before submission, the vote is encrypted on the client side (AES for data encryption; RSA for securely exchanging keys).


The encrypted vote is transmitted over secure HTTPS to the backend.


Logging:


The action is logged as an audit event and, optionally, forwarded to the Solr module for indexing.


4.3 Distributed Vote Processing
Vote Reception:


The encrypted vote is received by one of the distributed nodes.


Consensus Round:


Nodes participate in a consensus round (using a simplified PBFT/PoA algorithm) to validate the vote.


Clock Sync & Distributed Mutex Check:


Nodes ensure they have the same timestamp via periodic clock synchronization.


The distributed mutex is acquired to prevent any concurrent update conflicts.


Vote Tally Update:


Once consensus is reached, the vote is integrated into the current tally.


The system updates the primary database or ledger that stores the verified votes.


4.4 Real-Time Updates and Administration
Broadcasting via WebSockets:


Updated vote tallies are broadcast in real-time to all connected clients.


Administrative Auditing:


Admin users can search and review logs via a dedicated interface that queries the Solr index, ensuring full system transparency and auditability.



5. Non-functional Requirements & Optional Enhancements
Enhanced Security (2FA):
 The use of 2FA, as a second authentication factor, reduces the risks of compromised credentials.


Audit and Observability (Solr):
 Solr integration improves log searching capabilities, supporting non-functional monitoring and the transparency of voting events.


Distributed Robustness:
 Clock synchronization and distributed mutex solutions ensure reliable operation under simultaneous access and update scenarios.



6. Final Summary
This comprehensive design provides an end-to-end solution that meets both IS and PDC course rubrics:
IS Focus:
 Secure, scalable IAM, robust encryption, and a two-factor authentication step.


PDC Focus:
 Distributed vote processing via consensus, clock synchronization, and mutex locking to guard against race conditions.


Enhanced Observability:
 Optional Solr integration for comprehensive audit logging and search capabilities.


By emphasizing a minimal viable prototype (MVP) approach, the system is designed to be developed and demonstrated within a two-week timeframe. The design carefully balances core functionality with optional enhancements, ensuring a realistic yet impressive demo that covers all required points.
Detailed Timeline
Pre-Kickoff (Before Main Team Work)
April 12 (Saturday) – Zikrullah: Preliminary Research & Setup


Research and document a simplified consensus algorithm (e.g., basic PBFT or PoA).


Investigate clock synchronization methods (e.g., an NTP-inspired master node).


Look into options for a distributed mutex mechanism (e.g., token passing or simple lock manager).


Draft notes on technical requirements for the distributed vote processing module.


Set up the development environment for simulated nodes (Docker containers, if applicable).



Week 1: April 14 – April 20
April 14 (Monday) – Kickoff & Design Finalization (All Team Members)
Kickoff Meeting:


Review the overall design and assign tasks.


Finalize any outstanding design details and update the design document.


Team Checkpoint:


Agree on communication channels and a daily stand-up time.


April 14 – April 16: Task Breakdown & Initial Module Setup
Areesha:


Create wireframes and initial prototypes for the React UI.


Outline the login (with 2FA prompt), registration, and voting dashboard screens.


Shahliza:


Map out the backend architecture.


Begin designing IAM endpoints (login, registration, JWT issuance) and planning for 2FA integration.


Set up the basic FastAPI/Django project structure.


Zikrullah:


Share the pre-kickoff research with the team.


Detail the distributed vote processing module requirements.


Start coding basic simulation of nodes and test basic communication between nodes (even a simple local process communication will do).


April 17 – April 20: Module Development
Areesha:


Develop React components for the login/registration and voting dashboard.


Integrate WebSocket client for real-time updates.


Prepare UI elements for receiving the OTP (2FA) after login.


Shahliza:


Develop backend APIs for user authentication, JWT token management, and initial 2FA simulation (OTP generation/verification).


Build vote submission endpoints that accept encrypted votes.


Zikrullah:


Develop the distributed node functionality:


Implement the consensus protocol module.


Integrate clock synchronization logic to adjust timestamps.


Develop the distributed mutex mechanism to handle vote tally updates.


Test these components independently (using simulation techniques).



Week 2: April 21 – April 28
April 21 – April 22: Integration Checkpoint
All Team Members:


Hold an integration meeting to combine frontend, backend/IAM, and distributed vote processing modules.


Identify and outline any interface issues between the modules.


April 23 – April 25: Final Integration & Testing
Areesha:


Finalize the UI based on integration feedback.


Ensure that error handling and user notifications are clear on all screens.


Shahliza:


Fine-tune backend endpoints based on integration testing.


Secure all API endpoints using HTTPS and complete 2FA integration.


Log key events for audit purposes (to be used later by the optional Solr module).


Zikrullah:


Integrate the distributed vote processing module with backend vote submission.


Ensure that the consensus, clock sync, and mutex mechanisms are invoked during vote processing.


Troubleshoot distributed component communication in the integrated environment.


April 26 – April 27: Optional Solr Integration & Final Testing
Areesha:


Work with the team to ensure that audit log UIs (if any) are in sync with the backend.


Shahliza:


(Optionally) Integrate a lightweight Solr instance to index authentication and vote logs.


Run tests to ensure logs are captured and searchable; if time doesn’t permit, document the design as a future enhancement.


Zikrullah:


Run end-to-end testing of distributed modules.


Validate that vote tallies are updated correctly under concurrent scenarios.


Work with Shahliza to test the overall system flow under load conditions.


April 28: Final Polish & Demo Preparation
All Team Members:


Perform final system tests.


Fix any last-minute bugs or integration issues.


Prepare a short demo script detailing the flow from login (with 2FA) to casting votes and real-time result updates.


Ensure that documentation is updated with any last-minute changes.



Summarizing Table of Timeline & Responsibilities
Date
Tasks
Areesha
Shahliza
Zikrullah
April 12 (Sat)
Preliminary research & development setup
-
-
Research consensus, clock sync & mutex
April 14 (Mon)
Kickoff meeting & design finalization
Design wireframes for UI
Draft backend architecture & IAM design
Share research & start simulated node setup
April 14–16
Initial module setup
Create React prototypes
Set up FastAPI/Django project
Begin coding communication between nodes
April 17–20
Module Development
Develop React components & WebSocket UI
Develop IAM endpoints & vote submission
Implement consensus, clock sync & mutex
April 21–22
Integration Checkpoint
Participate in integration meeting
Participate in integration meeting
Participate in integration meeting
April 23–25
Final Integration & Testing
Finalize UI and user notifications
Fine-tune backend APIs and 2FA
Integrate distributed processing & testing
April 26–27
Optional Solr integration & final end-to-end testing
Assist with audit log UI integration
Integrate Solr if possible and run tests
Validate distributed nodes under load
April 28
Final testing, polish, demo preparation, documentation update
Final polish of UI
Finalize backend security and logs
Final debugging of distributed modules


