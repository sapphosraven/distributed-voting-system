We are building a secure, distributed, and end-to-end encrypted online voting system as a demo. The backend is fully functional and uses Node.js, Express, PostgreSQL (via Sequelize), Redis, and Docker Swarm. All backend routes are exposed under /api/*, with CORS enabled for all origins, and all secrets (including RSA keys) are mounted via Docker secrets.

We now need you to build the complete frontend from scratch using:

React + Vite

HeroUI (formerly NextUI) ‚Äî use the official HeroUI component gallery as visual inspiration

React Router for routing

Modular architecture: pages/, components/, hooks/, utils/, etc.

üîß Frontend Responsibilities:

Build beautiful, modern, mobile-friendly UI using HeroUI. It should match or exceed the quality of dashboards like Linear, Vercel, or HeroUI's own demo site.

Use /api/* endpoints to:

Sign up and log in with email and password

Trigger OTP send (via email)

Handle OTP verification

Show list of eligible elections

Allow users to cast a vote

Show results page (if allowed)

Support password change flow (with OTP)

Add detailed console logging throughout all API calls and state transitions.

Use mock data/state if any backend endpoint is not yet implemented ‚Äî just create placeholders with TODOs.

Include inline test hooks and buttons for verifying flows like login + OTP, castVote, signature rejection, lock retry (optional, can be a dev-only view).

üîí Auth & Voting Flow (connect to backend /api/* routes):

Login/Signup ‚Üí Receive OTP ‚Üí Verify OTP

Fetch elections based on user eligibility (backend filters via domains/email)

View eligible elections, vote, and view results

Votes are end-to-end encrypted and signed on the backend, but frontend must ensure proper user interaction, confirmation, and success/error handling

üåê Frontend Routing Requirements:

/login

/register

/verify-otp

/elections

/vote/:electionId

/results/:electionId

Optional: /dashboard or /dev-test for admin/dev console testing

üîÅ Distributed System Notes (backend):

Backend handles distributed consensus, vote locking, and time sync

Frontend just calls APIs and shows feedback (e.g., "vote being confirmed", "lock failed", etc.)

üîß Project Requirements:

Wipe existing frontend code completely ‚Äî this should be a fresh start

Use React + Vite + HeroUI

Fully modular: components/hooks/utils/pages separation

Console logging and inline debug/test flows allowed

Use HeroUI components like Cards, Buttons, Input Forms, Tables, etc., for elections, vote UIs, results

Assume base URL /api for all API calls

