version: '3.8'

services:
  # Redis Cluster - 6 nodes (3 masters, 3 replicas)
  redis-node-1:
    image: redis:7.0
    container_name: redis-node-1
    networks:
      - voting-network
    ports:
      - "7000:7000"
    volumes:
      - ./redis/7000/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7000", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    
  redis-node-2:
    image: redis:7.0
    container_name: redis-node-2
    networks:
      - voting-network
    ports:
      - "7001:7001"
    volumes:
      - ./redis/7001/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    
  redis-node-3:
    image: redis:7.0
    container_name: redis-node-3
    networks:
      - voting-network
    ports:
      - "7002:7002"
    volumes:
      - ./redis/7002/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    
  redis-node-4:
    image: redis:7.0
    container_name: redis-node-4
    networks:
      - voting-network
    ports:
      - "7003:7003"
    volumes:
      - ./redis/7003/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    
  redis-node-5:
    image: redis:7.0
    container_name: redis-node-5
    networks:
      - voting-network
    ports:
      - "7004:7004"
    volumes:
      - ./redis/7004/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    
  redis-node-6:
    image: redis:7.0
    container_name: redis-node-6
    networks:
      - voting-network
    ports:
      - "7005:7005"
    volumes:
      - ./redis/7005/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
  
  # Redis cluster initializer
  redis-cluster-init:
    image: redis:7.0
    container_name: redis-cluster-init
    networks:
      - voting-network
    depends_on:
      redis-node-1:
        condition: service_healthy
      redis-node-2:
        condition: service_started
      redis-node-3:
        condition: service_started
      redis-node-4:
        condition: service_started
      redis-node-5:
        condition: service_started
      redis-node-6:
        condition: service_started
    command: >
      bash -c "
        set -e;
        echo 'Waiting for Redis nodes to be ready...'
        sleep 15;
        # Flush existing data on each node
        for hostport in redis-node-1:7000 redis-node-2:7001 redis-node-3:7002 redis-node-4:7003 redis-node-5:7004 redis-node-6:7005; do
          echo \"Flushing $$hostport\"
          redis-cli -h $${hostport%:*} -p $${hostport#*:} FLUSHALL
        done;
        
        echo 'Waiting before creating cluster...'
        sleep 5;
        
        # Create cluster - using proper argument format
        echo \"Creating cluster\"
        redis-cli --cluster create redis-node-1:7000 redis-node-2:7001 redis-node-3:7002 redis-node-4:7003 redis-node-5:7004 redis-node-6:7005 --cluster-replicas 1 --cluster-yes
        
        echo 'Cluster initialization complete!'
        # Wait to ensure all nodes are fully synchronized
        echo 'Waiting for cluster to stabilize...'
        sleep 15
        
        # Verify cluster state
        redis-cli -c -h redis-node-1 -p 7000 cluster info | grep cluster_state
        exit 0
      "
    healthcheck:
      test: ["CMD", "redis-cli", "-c", "-h", "redis-node-1", "-p", "7000", "cluster", "info"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 30s
  
  # Voting system nodes
  voting-node-1:
    build: ./node
    container_name: voting-node-1
    networks:
      - voting-network
    ports:
      - "5001:5000"
    volumes:
      - ./logs:/app/logs
    environment:
      - NODE_ID=node1
      - NODE_ROLE=leader
      - REDIS_NODES=redis-node-1:7000,redis-node-2:7001,redis-node-3:7002
      - LOG_DIR=/app/logs
    depends_on:
      redis-cluster-init:
        condition: service_completed_successfully

  voting-node-2:
    build: ./node
    container_name: voting-node-2
    networks:
      - voting-network
    ports:
      - "5002:5000"
    volumes:
      - ./logs:/app/logs
    environment:
      - NODE_ID=node2
      - NODE_ROLE=follower
      - REDIS_NODES=redis-node-1:7000,redis-node-2:7001,redis-node-3:7002
      - LOG_DIR=/app/logs
    depends_on:
      redis-cluster-init:
        condition: service_completed_successfully

  voting-node-3:
    build: ./node
    container_name: voting-node-3
    networks:
      - voting-network
    ports:
      - "5003:5000"
    volumes:
      - ./logs:/app/logs
    environment:
      - NODE_ID=node3
      - NODE_ROLE=follower
      - REDIS_NODES=redis-node-1:7000,redis-node-2:7001,redis-node-3:7002
      - LOG_DIR=/app/logs
    depends_on:
      redis-cluster-init:
        condition: service_completed_successfully

networks:
  voting-network:
    driver: bridge
